<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var string[]
     */
    protected $fillable = [
        'name',
        'email',
        'username',
        'password',
        'avatar',
        'activated_at',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'activated_at' => 'datetime',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function($model) {
            $model->avatar = User::generateAvatar($model->email);
        });
    }

    public function getRouteKeyName(): string
    {
        return 'username'; // TODO: Change the autogenerated stub
    }

    public function getAvatar()
    {
        return $this->avatar;
    }

    public static function generateAvatar(string $email): string
    {
        // Trim leading and trailing whitespace from
        // an email address and force all characters
        // to lower case
        $address = strtolower( trim( $email ) );

        // Create an MD5 hash of the final string
        $hash = md5( $address );

        // Grab the actual image URL
        return 'https://www.gravatar.com/avatar/' . $hash;
    }

    public function isAdmin(): bool
    {
        return !!$this->is_admin;
    }

    public function stars(): \Illuminate\Database\Eloquent\Relations\BelongsToMany
    {
        return $this->belongsToMany(Project::class,'stars', 'project_id','user_id');
    }
}

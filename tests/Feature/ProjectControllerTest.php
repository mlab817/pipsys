<?php

namespace Tests\Feature;

use App\Models\Project;
use App\Models\ProjectDescription;
use App\Models\ProjectDisbursement;
use App\Models\ProjectFsInfrastructure;
use App\Models\ProjectFsInvestment;
use App\Models\ProjectNep;
use App\Models\ProjectOutput;
use App\Models\ProjectRegionInvestment;
use App\Models\ProjectResettlement;
use App\Models\ProjectRowa;
use App\Models\ProjectUpdate;
use App\Models\RefBasis;
use App\Models\User;
use App\Services\ProjectService;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class ProjectControllerTest extends TestCase
{
    use WithFaker;

    public $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::create([
            'name'          => $this->faker->name,
            'username'      => $this->faker->userName,
            'email'         => $this->faker->safeEmail,
            'password'      => Hash::make('password'),
            'activated_at'  => now(),
            'office_id'     => 1,
        ]);
    }

    public function generateData()
    {
        // create data
        $data = Project::factory()
            ->make();

        // create additional data
        $data['description'] = $this->faker->paragraph;
        $data['output'] = $this->faker->paragraph;
        $data['risk'] = $this->faker->paragraph;
        $data['updates'] = $this->faker->paragraph;
        $data['updates_date'] = $this->faker->date;
        $data['bases'] = RefBasis::all()->random(3)->pluck('id')->toArray();
        $data['rowa'] = ProjectRowa::factory()->make()->toArray();
        $data['nep'] = ProjectNep::factory()->make()->toArray();
        $data['gaa'] = ProjectResettlement::factory()->make()->toArray();
        $data['disbursement'] = ProjectDisbursement::factory()->make()->toArray();
        $data['fs_investments'] = ProjectFsInvestment::factory()->count(2)->make()->toArray();
        $data['region_investments'] = ProjectRegionInvestment::factory()->count(2)->make()->toArray();
        $data['fs_infrastructures'] = ProjectFsInfrastructure::factory()->count(2)->make()->toArray();

        return $data;
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_it_shows_list_of_projects()
    {
        $response = $this
            ->actingAs($this->user)
            ->get(route('projects.index'));

        $response->assertSee('Projects');

        $response->assertStatus(200);
    }

    public function test_it_shows_create_project_form()
    {
        $this->withoutExceptionHandling();

        $response = $this
            ->actingAs($this->user)
            ->get(route('projects.create'));

        $response->assertSee('New Program/Project');

        $response->assertStatus(200);
    }

    public function test_it_stores_project()
    {
        $this->withoutExceptionHandling();

        $data = $this->generateData();

        // submit the data
        $response = $this
            ->actingAs($this->user)
            ->post(route('projects.store'), $data->toArray());

        // no errors detected
        $response->assertSessionHasNoErrors();

        // data has been saved to database
        $this->assertDatabaseHas('projects', [
            'title' => $data['title'],
            'ref_pap_type_id' => $data['ref_pap_type_id']
        ]);

        $project = Project::where('title', $data['title'])->first();

        $this->assertDatabaseHas('project_outputs',[
            'project_id' => $project->id,
        ]);

        $this->assertDatabaseHas('project_descriptions',[
            'project_id' => $project->id,
        ]);

        $this->assertDatabaseHas('project_risks',[
            'project_id' => $project->id,
        ]);

        // redirected to projects index after creating project
        $response->assertRedirect(route('projects.index'));
    }

    public function test_it_shows_project_based_on_uuid()
    {
        // prevent model observers from being triggered
        Event::fake();

        $this->withoutExceptionHandling();

        $project = Project::factory()->state([
            'uuid' => nanoid(8),
            'creator_id' => $this->user->id,
        ])->create();

        $response = $this
            ->actingAs($this->user)
            ->get(route('projects.show', $project->uuid));

        $response->assertStatus(200);
    }

    public function test_it_updates_project()
    {
        Event::fake();

        $project = (new ProjectService)->create($this->generateData()->toArray());
        $project->uuid = nanoid(8);
        $project->creator()->associate($this->user);
        $project->save();

        $response = $this
            ->actingAs($this->user)
            ->put(route('projects.update', $project), [
                'title' => 'A new project'
            ]);

        $response->assertStatus(302);

        $this->assertDatabaseHas('projects',[
            'title' => 'A new project',
        ]);

    }
}

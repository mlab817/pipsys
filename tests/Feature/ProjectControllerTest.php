<?php

namespace Tests\Feature;

use App\Models\Project;
use App\Models\ProjectDescription;
use App\Models\ProjectOutput;
use App\Models\ProjectUpdate;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class ProjectControllerTest extends TestCase
{
    public $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::create([
            'name'          => 'ftp',
            'username'      => 'ftp',
            'email'         => 'ftp@gmail.com',
            'password'      => Hash::make('password'),
            'activated_at'  => now(),
            'office_id'     => 1,
        ]);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_it_shows_list_of_projects()
    {
        $response = $this
            ->actingAs($this->user)
            ->get(route('projects.index'));

        $response->assertSee('Projects');

        $response->assertStatus(200);
    }

    public function test_it_shows_create_project_form()
    {
        $response = $this
            ->actingAs($this->user)
            ->get(route('projects.create'));

        $response->assertSee('New Program/Project');

        $response->assertStatus(200);
    }

    public function test_it_stores_project()
    {
        $this->withoutExceptionHandling();

        // create data
        $data = Project::factory()
            ->has(ProjectDescription::factory()->count(1),'description')
            ->has(ProjectUpdate::factory()->count(1),'project_update')
            ->has(ProjectOutput::factory()->count(1),'output')
            ->make();

        // submit the data
        $response = $this
            ->actingAs($this->user)
            ->post(route('projects.store'), $data->toArray());

        // no errors detected
        $response->assertSessionHasNoErrors();

        // data has been saved to database
        $this->assertDatabaseHas('projects', [
            'title' => $data['title'],
            'ref_pap_type_id' => $data['ref_pap_type_id']
        ]);

        $project = Project::where('title', $data['title'])->first();

        $this->assertDatabaseHas('project_outputs',[
            'project_id' => $project->id,
        ]);

        // redirected to projects index after creating project
        $response->assertRedirect(route('projects.index'));
    }
}
